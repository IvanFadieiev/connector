exit
Import::CreateCategories.new.category_tree(mag_id, login).map(&:category_id)
Import::CreateCategories.new.category_tree(8, login).map(&:category_id)
login = Login.find(42)
Import::CreateCategories.new.category_tree(8, Login.find(42).id).map(&:category_id)
Import::CreateCategories.new.category_tree(8, login.id).map(&:category_id)
login.id
login
Import::CreateCategories.new.category_tree(mag_id, login.id).map(&:category_id)
exit
Import::CreateCategories.new.category_tree(mag_id, login.id).map(&:category_id)
login.id
mag_id
exit
next
mag_ids
next
login
exit
continue
exit
n
category
n
sub
n
sub
nextsub
next
sub
next
exit
s
exit
cat.category_id
n
childrens.blank?
childrens = Category.where(parent_id: cat.category_id, login_id: login.id)
cat.category_id
exit
Category.where(login_id: 42, category_id: 318)
Category.where(login_id: 42).map(&:category_id)
@category_tree.map{|a| a.category_id}
@category_tree.count
@category_tree
Category.where(login_id: 42).count
Category.where(login_id: 42)
@category_tree
@category_tree.count
exit
next
@category_tree.count
@category_tree
c
cat.category_id
childrens
next
cat
next
childrens
next
@category_tree
exit
childrens
childrens.blank?
@category_tree.count
@category_tree
childrens.blank?
childrens.count
childrens
exit
Category.where(parent_id: category, login_id: login.id).count
Category.where(parent_id: category, login_id: login.id).cout
category
c
category
continue
params
array_category
continue
ids
continue
Collection.where(login_id: Login.last.id)
ids
continue
catch
ids.include?("-1")
ids.blank?
ids
category
continue 50
continue
next
s
continue
Collection.where(login_id: Login.last.id).delete_all
Collection.where(login_id: Login.last.id)
n
Ñ‚
params['213_shopify_categories_ids'.to_sym].include?("-1")
params['213_shopify_categories_ids'.to_sym]
params[:'213_shopify_categories_ids']
param[:'213_shopify_categories_ids']
param[:213_shopify_categories_ids]
params
category.childrens[0].childrens[0].childrens
category.childrens[0].childrens[0]
category.childrens[0].childrens
category.childrens[1].childrens
category.childrens[1]
category.childrens
category.children
category
params
continue
params[param_magento]
params.count
params
@all_categories
continue
category.category_id
category[:category_id]
category[:name]
category
level_cat.keys.first
@all_categories.first.keys.first
@all_categories.first.keysfirst
@all_categories.first.keys[0]
@all_categories.first.keys
@all_categories.first.keys.to_s
@all_categories.map{|a| p a.values}
@all_categories.map{|a| p a.keys}
@all_categories.map{|a| p a.values}
@all_categories.map{|a| p a.value}
@all_categories.map{|a| p a}
@all_categories.first.keys
Category.all.map(&:level).uniq.reject{|a| (a == 0) || (a == 1) }
Category.all.map(&:level).uniq.reject{|a| (a == 0) || (a == 1)) }
Category.all.map(&:level).uniq.reject{|a| a == 0 || a == 1) }
Category.all.map(&:level).uniq.reject{|a| a == (0 , 1) }
Category.all.map(&:level).uniq.reject{|a| a == (0 || 1) }
Category.all.map(&:level).uniq.reject{|a| a == (0 && 1) }
Category.all.map(&:level).uniq.reject{|a| a == (0 || 1) }
@all_categories.first.keys
@all_categories.first.class
@all_categories[2]
@all_categories[:3]
@all_categories[3]
@all_categories.first
@all_categories.last
@all_categories.count
 @all_categories << { 2 => Category.where(level: 2, is_active: 1, login_id: Login.last.id)}
@all_categories.count
@all_categories
 @all_categories << { 3 => Category.where(level: 3, is_active: 1, login_id: Login.last.id)}
@all_categories = []
@"all_categories_"
@all_categories_ + "1"
@all_categories_#{a}
@all_categories_+ 1
@all_categories_2
@all_categories_1
next
continue
product.magento_categories.group_by(&:category_id).keys.uniq.count
product.magento_categories.group_by(&:category_id).keys.uniq.map{|a| p a}
product.magento_categories.group_by(&:category_id).keys.uniq.map{|a| a}
product.magento_categories.group_by(&:category_id).keys.uniq
TargetCategoryImport.where(login_id: login.id, magento_category_id: magento_cat_id).map(&:shopify_category_id).uniq.map{|a| a}
TargetCategoryImport.where(login_id: login.id, magento_category_id: magento_cat_id).map(&:shopify_category_id).uniq
product.magento_categories.group_by(&:category_id).keys.uniq
exit
!cat[0].blank? == true
!cat[0].blank?
shop_cat.present?
shop_cat.exist?
shop_cat.blank?
shop_cat ==true
shop_cat = cat[2]
shop_cat = cat[3]
shop_cat = cat[2]
shop_cat = cat[1]
shop_cat = cat[0]
shop_cat = cat[0].target_category_import.shopify_category_id
next
cat
product.magento_categories.group_by(&:category_id).map{|a| a.second}
product.magento_categories.group_by(&:category_id)
product.magento_categories
cat
exit
continue
product.magento_categories.group_by(&:category_id).map{|a| a.second}.each do |cat|
next
continue
next
step
product
product.magento_categories.count
next
product.magento_categories.count
images_for_product[0].img_url
images_for_product[0].imag_url
images_for_product[0].image_url
next
continue
next
end
next
images_for_product.blank?
images_for_product = product.images
images_for_product.blank?
product.images.last.img_url
product.images
exit
continue
product.magento_categories.distinct
product.magento_categories
next
continue
next
@all_categories.count
@all_categories[0].category_id
next
