exit
prod.last.id
prod.count
prod
prod.id
exit
continue
exit
prod = ShopifyAPI::Product.find(:all, :params => {'title': title })
title = ip.title
category_targets.blank?
category_targets = CategoryForMonitoring.where( magento_category_id: cat.category_id ).map(&:shopify_category_id)
cat = product.magento_categories.where(new: true).group(:category_id).distinct[0]
map = product.magento_categories.where(new: true).group(:category_id).distinct[0]
product.magento_categories.where(new: true).group(:category_id).distinct[0]
product.magento_categories.where(new: true).group(:category_id).distinct[0].category_id
product.magento_categories.where(new: true).group(:category_id).distinct[0].class
product.magento_categories.where(new: true).group(:category_id).distinct[0]
product.magento_categories.where(new: true).group(:category_id).distinct.count
product.magento_categories.where(new: true).group(:category_id).distinct
id
ip.id
ip.images.blank?
ip
exit
 product.update_attributes(shopify_product_id: id)
product
print "Prod #{id} add to cat: #{shop_cat}"
puts "Prod #{id} add to cat: #{shop_cat}"
p "Prod #{id} add to cat: #{shop_cat}"
 ShopifyAPI::Collect.create({"collection_id": shop_cat, "product_id": id})
ShopifyAPI::Collect.find(:all, :params => {"collection_id": shop_cat, "product_id": id}).blank?
shop_cat = category_target[0]
ShopifyAPI::Collect.find(:all, :params => {"collection_id": shop_cat, "product_id": id}).blank?
category_target do |shop_cat|
 Auth.shopify
category_target.map{|a| p a}
category_target
continue
ShopifyAPI::Collect.find(:all, :params => {"collection_id": shop_cat, "product_id": id}).blank?
shop_cat = category_target[0]
id
category_target[0]
category_target.blank?
category_target = CategoryForMonitoring.where( magento_category_id: cat.category_id ).map(&:shopify_category_id)
continue
category_target = CategoryForMonitoring.where( magento_category_id: cat.category_id ).map(&:shopify_category_id)
continue
 category_target = CategoryForMonitoring.where( magento_category_id: cat.category_id ).map(&:shopify_category_id)
continue
CategoryForMonitoring.where( magento_category_id: cat.category_id )
cat
continue
cat
continue
s
continue
step
CategoryForMonitoring.where( magento_category_id: cat.category_id )
product.magento_categories.where(new: true).group(:category_id).distinct
product.magento_categories
continue
s
product.price.to_i
product.price == nil
s
product.description
product.description == nil
s
product.product_simples.where(new: true).map{|a| simples << a if (a.qty > 0)}.count
product.product_simples.where(new: true).map{|a| simples << a if (a.qty > 0)}
n
product.product_simples.where(new: true)
continue
Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
continue
s
n
s
 Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
exit
Product.where(new: true)
next
 Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
exit
Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
continue
Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
exit
Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
exit
 Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'")
Product.includes(:images, :magento_categories).where("new = true and status = 1 and prod_type = 'configurable'").uniq
continue
exit
error
exit
login_v2
login_v1
exit
Parser::ProductList.new.array_of_categories_tree(login)
cat_id
exit
a.variants.map{|p| p.update_attributes( 'price': product.special_price.to_i, 'compare_at_price': product.price.to_i )}
a.variants.map{|p| p.update_attributes( 'price': product.price.to_i )}
a.variants.map{|p| p.update_attributes( 'price': 500 )}
a.variants.map{|p| p.update_attributes( 'price': product.price.to_i )}
a.variants.map{|p| p.update_attributes( 'price': "200" )}
a.update_attributes( 'option2': "azaza")
a.id
a.
a.variants.map{|p| p.update_attributes( 'price': product.price.to_f )}
product.price.to_f
product.price
product
a
product
exit
ip
simple
exit
simple[:options][:item]
exit
simple[:options][:item]
simple[:options][:item][:label]
simple[:options][:item][:label] == "Size"
simple[:options][:item]
simple[:options]
!simple[:options]
!simple[:options][:item].include?(:"@xsi:type")
simple[:options][:item].include?(:"@xsi:type")
simple[:options][:item]
simple[:options]
exit
simple[:options][:item]
simple[:options][:item].count
simple[:options][:item]
simple[:options]
simple[:options][:item]
exit
учше
simple[:options][:item].count
simple[:options][:item]юсщгте
simple[:options][:item]
simple[:options][:item].count == 1
simple[:options][:item]
length.blank?
length
exit
учше
exit
length.blank?
s_length = length[0]
c
с
exit
simple[:options][:item].count == 1
continue
s_length    = simple[:options][:item][1][:value]
s_size      = simple[:options][:item][0][:value]
next
туче
simple[:options][:item].count == 1
exit
s
s_length    = s[:value] if s[:label] == "Length"
s_size      = s[:value] if s[:label] == "Size"
step
s_size      = s[:value] if s[:label] == "Size"
next
simple[:options][:item].count
continue
s
next
s_length
 s_size
next
simple[:options][:item][1][:label]
simple[:options][:item][1]
simple[:options][:item][0]
simple[:options][:item].count
simple[:options][:item]
simple[:options][:item][:value]
simple[:options]
exit
simple_products[0]
simple_products.class
simple_products = $client.call(:catalog_product_info, message: {:sessionId => $session, product_id: prod[:product_id] , store_view: login.store_id }).body[:catalog_product_info_response][:info][:associated_products][:item]
simple_products.key
simple_products.class
simple_products[1]
simple_products[0]
simple_products.blank?
simple_products = $client.call(:catalog_product_info, message: {:sessionId => $session, product_id: prod[:product_id] , store_view: login.store_id }).body[:catalog_product_info_response][:info][:associated_products]
prod[:type] == "configurable"
prod[:type]
exit
next
product.qty
exit
Login.last
product.magento_categories.where(login_id: Login.last.id)
product.magento_categories
product.magento_categories.where(login_id: Login.last.id)
product = Product.last
Product.last.magento_categories.last.target_category_import
Product.last.magento_categories.first.target_category_import
Product.last.magento_categories.last.target_category_import
Product.last.magento_categories
JoinTableCategoriesProduct.where(login_id: 90)
Product.last.magento_categories
JoinTableCategoriesProduct.last
oinTableCategoriesProduct.last
products_to_category[0][:item][0][:value]
products_to_category[0[:item][0][:value]
products_to_category[0]
products_to_category.class
next
products_to_category.class == Hash
next
$products_to_category
$products_to_category == nil
products_to_category
exit
next
cat_id
next
ids
next
cat_id
next
cat_id
params
cat_id
next
cat_id
ids
next
 ids.blank? || ids.include?("-2")
next
ids.include?("0")
cat_id
exit
continue
ids
continue
cat_id
exit
params
cat_id = category.category_id
category = array_category.values[0][0]
array_category.values[0][0]
array_category.values[0]
array_category= @all_categories[0]
@all_categories[0]
@all_categories
