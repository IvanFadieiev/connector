continue
next
p  "#{product.id} CREATED!!!!!!!!_______!!!!!!!!!!!!!__________"
continue
next
 product.id
p product.id + " CREATED!!!!!!!!_______!!!!!!!!!!!!!__________"
continue
category
title
exit
images
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((b[:key] == "url") ) } }
images = []
images
arrr[0][:item].map{|b| images << b[:value] if ((b[:key] == "url") ) }
arrr[0][:item].map{|b| images << b[:value] if ((a[:key] == "url") ) }
arrr[0][:item]
arrr[:item]
arrr
images
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((a[:key] == "url") ) } }
images
arrr[:item].map{ |a| images << a[:value] if (a[:key] == "url") }
images
image
arrr[0][:item][:key]
arrr[0][:item]
arrr[0]
arrr.map{|a| p a[:item]}
arrr.map{|a| p a}
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((a[:key] == "url") ) } }
arrr
images
next
 arrr == nil
unless arrr == nil
arrr.class
arrr.count
arrr
continue
exit
$children_categories_2_lavel
$children_categories_1_lavel.count
$children_categories_1_lavel
$children_categories_2_lavel
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_3_lavel
continue
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_1_lavel
category
$children_categories_1_lavel
$children_categories_4_lavel.count
$children_categories_3_lavel.count
$children_categories_2_lavel.count
$children_categories_2_lavel
$children_categories_1_lavel.count
$children_categories_1_lavel
next
created_categories.count
created_categories
continue
$children_categories_4_lavel.count
$children_categories_1_lavel.count
$children_categories_2_lavel.count
$children_categories_3_lavel.count
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_1_lavel.blank?
$children_categories_1_lavel
next
created_categories
exit
$children_categories_1_lavel
next
 created_categories
continue
next
category.id
$children_categories_1_lavel
continue
next
category.id
TargetCategoryImport.delete_all
TargetCategoryImport.all
TargetCategoryImport.count
$children_categories
next
created_categories
next
continue
self
continue
self.target_url.gsub!(/^(https?):\/\//, "")
continue
next
self
continue
self
params
exit
continue
ShopifyAPI::CustomCollection.last
continue
session[:token]
 ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
session[:token]
shop = ShopifyAPI::Shop.current
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
title
continue
login = Login.find(259)
ShopifyAPI::CustomCollection.new(title: "asdasdasdasd" )
ShopifyAPI::CustomCollection.new(title: "asdasdasdasd" } )
ShopifyAPI::CustomCollection.new( @attributes={ 'title': "asdasdasdasd" } ).save
ShopifyAPI::CustomCollection.new( @attributes={ 'title': "asdasdasdasd" } )
ShopifyAPI::CustomCollection.new
ShopifyAPI::CustomCollection.new({ 'title': "asdasd", 'body_html': "asdasd" } )
ShopifyAPI::SmartCollection.new
ShopifyAPI::CustomCollection.new({ 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new
ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
exit
ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
body_html
html_body
title
continue
title
 categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
categ
next
continue
a = ShopifyAPI::CustomCollection.new( { "handle": "azaza","title": 'asdasdtitle', "body_html": 'body_html' } )
a = ShopifyAPI::CustomCollection.new( @attributes={ "handle": "azaza","title": 'asdasdtitle', "body_html": 'body_html' } )
a = ShopifyAPI::CustomCollection.new( @attributes={ 'handle': "azaza",'title': 'asdasdtitle', 'body_html': 'body_html' } )
a = ShopifyAPI::CustomCollection.new( @attributes={ 'title': 'asdasdtitle', 'body_html': 'body_html' } )
a = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new
next
ShopifyAPI::CustomCollection.new
next
exit
ShopifyAPI::CustomCollection.new( @attributes={'handle': "deech", 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
next
exit
continue
body_html
title
next
continue
next
src
next
continue
next
cat
src
next
title
next
continue
next
body_html
next
title
next
exit
body_html
ShopifyAPI::CustomCollection.new
next
find_category[0][:image]
next
find_category[0][:description]
find_category[0][:description].class
find_category[0][:description]
find_category[0][:name]
next
data[0][:category_id] == category.magento_category_id
category.magento_category_id
category
data[0][:category_id]
data[0]
next
data
next
exit
next
exit
xit
exit
$all_prod_imgs
exit
$all_prod_imgs
exit
arrr == nil
exit
arrr != nil
arrr
exit
arrr
exit
$err
exit
hashes.count
hashes.сщгте
hashes.each do |x|
hashes = $all_prod_imgs
 $all_prod_imgs
$all_prod_imgs
continue
$err
exit
continue
image_name
img_url
exit
nilus
parsed_data.map{ |a| nilus << a if (a.class != Integer )}
nilus
parsed_data.map{ |a| nilus << a if (a==nil)}
nilus = []
parsed_data
exit
byebug
exit
arrr
arrr[:item]
next
product_id
parsed_data
next
images
arrr[:item].map{ |a| images << a[:value] if (a[:key] == "url") }
images
arrr[:item]
next
exit
ext
exit
images
arrr[:item].map{ |a| images << a[:value] if (a[:key] == "url") } 
arrr[:item]
arrr[:item].map{ |a| a.map{ |a| images << a[:value] if (a[:key] == "url") } }
arrr[:item]
arrr.keys
