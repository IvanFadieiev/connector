continue
ParserProcess.parsing_process_status
n
ParserProcess.parsing_process_status
c
ParserProcess.parsing_process_status
exit
continue
ParserProcess.parsing_process_status
continue
exit
category[:category_id]
TargetCategoryImport.where(login_id: @login.id, magento_category_id: category[:category_id])
TargetCategoryImport.where(login_id: @login.id, magento_category_id: category[:category_id]).map(&:shopify_category_id)
n
next
 category[:category_id]
TargetCategoryImport.where(login_id: @login.id)
TargetCategoryImport.where(login_id: @login.id).count
TargetCategoryImport.where(login_id: @login.id, magento_category_id: category[:category_id]).map(&:shopify_category_id)
TargetCategoryImport.where(login_id: @login.id, magento_category_id: category[:category_id]).map(&:shopify_category_id))
next
continue
@exists_logins
continue
params
continue
params
continue
@exist_login.blank?
next
exit
t
t.delete_if{|j| j.blank? }
t = [[1],[2],[3],[]]
b = [[1],[2],[3],[]]
v = [[1],[2],[3],[]]
v = [[],[1],[2],[3]]
x.delete_if{|j| j.blank? }
x.delete_if!{|j| j.blank? }
x.delete_if{|j| j.blank? }
x.reject{|j| j.blank? }
x = [[1],[1],[1]]
x
x = []
s
s.reject{|j| j.blank? }
s = [[1],[1],[]]
s.reject{|j| j.blank? }
s.reject!{|j| j.blank? }
s = [[1],[1],[1]]
@all_trees
@all_trees.reject!{|j| j.blank? }
@all_trees
@all_trees.reject!{|j| j.blank? }
@all_trees
skiped.blank?
skiped = Collection.where( shopify_category_id: -1, login_id: login.id ).map( &:magento_category_id )
Login.last
skiped = Collection.where( shopify_category_id: -1, login_id: Login.last.id ).map( &:magento_category_id )
@all_trees
next
s = @all_trees.size - 1
mag_ids
n
next
mag_ids
next
exit
n
exit
Parser::ProductList.new.array_of_categories_tree(Login.last)
Parser::ProductList.new.array_of_categories_tree(Login/last)
Import::CreateCategories.new.category_tree(3, Login.last).count
Import::CreateCategories.new.category_tree(3, Login.last)
Category.where(login_id: Login.last.id, is_active: "1").c
Category.where(login_id: Login.last.id, is_active: "1")
Import::CreateCategories.new.category_tree(3, Login.last).map(&:category_id)
Category.where(login_id: Login.last.id, is_active: "1").uniq(&:name).count
Category.where(login_id: Login.last.id, is_active: "1").uniq(&:category_id).count
Category.where(login_id: Login.last.id, is_active: "1").uniq(&:category_id)count
Category.where(login_id: Login.last.id, is_active: "1").count
Category.where(login_id: Login.last.id, is_active: "1").last
Category.where(login_id: Login.last.id, category_id: 173).last
Category.where(login_id: Login.last.id, category_id: 426).last
Category.where(login_id: Login.last.id, category_id: 173).last
Category.find(login_id: Login.last.id, category_id: 173)
target[2]
target[10]
target[9]
target[8]
target[7]
target[6]
target[5]
target[4]
target[3]
target[2]
target[1]
target[0]
target = Category.where( login_id: Login.last.id)
Login.last
target = Category.where( login_id: Login.last.id).count
target = Category.where( login_id: Login.last.id)count
target = Category.where( login_id: Login.last.id).target
target = Collection.where( login_id: Login.last.id).count
target = Collection.where( login_id: Login.last.id)[0]
target = Collection.where( login_id: Login.last.id)[8]
target = Collection.where( login_id: Login.last.id)[7]
target = Collection.where( login_id: Login.last.id)[6]
target = Collection.where( login_id: Login.last.id)[5]
target = Collection.where( login_id: Login.last.id)[4]
target = Collection.where( login_id: Login.last.id)[3]
target = Collection.where( login_id: Login.last.id)[2]
target = Collection.where( login_id: Login.last.id)[1]
target = Collection.where( login_id: Login.last.id).count
target = Collection.where( login_id: Login.last.id)
target = Collection.find_by( login_id: Login.last.id)
target = Collection.find_by(magento_category_id: category_tree_ids[0], login_id: Login.last.id)
category_tree_ids
exit
product.price
product.special_price
exist_products.last.variants.first.price
exist_products.last.price
exist_products.last.variants.first
exist_products
exit
sku
product
exist_products
exit
Import::CreateCategories.new.category_tree(mag_id, login).map(&:category_id)
Import::CreateCategories.new.category_tree(8, login).map(&:category_id)
login = Login.find(42)
Import::CreateCategories.new.category_tree(8, Login.find(42).id).map(&:category_id)
Import::CreateCategories.new.category_tree(8, login.id).map(&:category_id)
login.id
login
Import::CreateCategories.new.category_tree(mag_id, login.id).map(&:category_id)
exit
Import::CreateCategories.new.category_tree(mag_id, login.id).map(&:category_id)
login.id
mag_id
exit
next
mag_ids
next
login
exit
continue
exit
n
category
n
sub
n
sub
nextsub
next
sub
next
exit
s
exit
cat.category_id
n
childrens.blank?
childrens = Category.where(parent_id: cat.category_id, login_id: login.id)
cat.category_id
exit
Category.where(login_id: 42, category_id: 318)
Category.where(login_id: 42).map(&:category_id)
@category_tree.map{|a| a.category_id}
@category_tree.count
@category_tree
Category.where(login_id: 42).count
Category.where(login_id: 42)
@category_tree
@category_tree.count
exit
next
@category_tree.count
@category_tree
c
cat.category_id
childrens
next
cat
next
childrens
next
@category_tree
exit
childrens
childrens.blank?
@category_tree.count
@category_tree
childrens.blank?
childrens.count
childrens
exit
Category.where(parent_id: category, login_id: login.id).count
Category.where(parent_id: category, login_id: login.id).cout
category
c
category
continue
params
array_category
continue
ids
continue
Collection.where(login_id: Login.last.id)
ids
continue
catch
ids.include?("-1")
ids.blank?
ids
category
continue 50
continue
next
s
continue
Collection.where(login_id: Login.last.id).delete_all
Collection.where(login_id: Login.last.id)
n
Ñ‚
params['213_shopify_categories_ids'.to_sym].include?("-1")
params['213_shopify_categories_ids'.to_sym]
params[:'213_shopify_categories_ids']
param[:'213_shopify_categories_ids']
param[:213_shopify_categories_ids]
params
category.childrens[0].childrens[0].childrens
category.childrens[0].childrens[0]
category.childrens[0].childrens
category.childrens[1].childrens
category.childrens[1]
category.childrens
category.children
category
params
continue
params[param_magento]
params.count
params
@all_categories
continue
category.category_id
category[:category_id]
category[:name]
category
level_cat.keys.first
@all_categories.first.keys.first
