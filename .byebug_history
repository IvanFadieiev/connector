continue
next
continue
$children_categories_2_lavel.map do |a|
$children_categories_2_lavel.map{|a| a.name}
$children_categories_2_lavel.map{|a| a.login_id}
$children_categories_2_lavel.to_a.count
$children_categories_2_lavel.to_a
$children_categories_2_lavel
next
continue
next
continue
next
children_categories_2_lavel
children_categories_2_lavel.uniq.each{|q| q.name}
next
children_categories_2_lavel
children_categories_2_lavel.blank?
children_categories_1_lavel
children_categories_1_lavel.blank?
next
children_categories_1_lavel
children_categories_1_lavel.blank?
login.id
next
continue
next
continue
children_categories_2_lavel.count
children_categories_2_lavel = Category.where("login_id == ? and parent_id == ? ", login.id, _1_lav_cat.category_id)
_1_lav_cat = children_categories_1_lavel[0]
next
login
children_categories_1_lavel.uniq.count
children_categories_1_lavel.count
children_categories_1_lavel
continue
next
children_categories_1_lavel
children_categories_1_lavel.blank?
continue
next
Product.where(login_id: login.id, status: "1").uniq.count
next
continue
next
categories_for_creating.any?
next
login
next
created_categories
next
CreateCategories.new_with(login)
continue
CreateCategories.new_with(login)
login
exit
$all_products.count
$all_products=[]
$all_products.class
$all_products.count
exit
p
next
exit
Product.new
Product.new(product_id: attr_hash[:product_id], type: attr_hash[:type], sku: attr_hash[:sku], name: attr_hash[:ean], ean: attr_hash[:ean], description: attr_hash[:description], price: attr_hash[:price], special_price: attr_hash[:special_price], special_from_date: attr_hash[:special_from_date], special_to_date: attr_hash[:special_to_date], url_key: attr_hash[:url_key], image: attr_hash[:image], color: attr_hash[:color], status: attr_hash[:status], weight: attr_hash[:weight], set: attr_hash[:set], size: attr_hash[:size], login_id: login.id)
attr_hash[:type].class
attr_hash[:type]
Product.create(product_id: attr_hash[:product_id], type: attr_hash[:type], sku: attr_hash[:sku], name: attr_hash[:ean], ean: attr_hash[:ean], description: attr_hash[:description], price: attr_hash[:price], special_price: attr_hash[:special_price], special_from_date: attr_hash[:special_from_date], special_to_date: attr_hash[:special_to_date], url_key: attr_hash[:url_key], image: attr_hash[:image], color: attr_hash[:color], status: attr_hash[:status], weight: attr_hash[:weight], set: attr_hash[:set], size: attr_hash[:size], login_id: login.id)
attr_hash[:size]
size:attr_hash[:size]
size: attr_hash[:size]
attr_hash[:product_id]
continue
next
attr_hash
attr_hash.keys.include?(:category_id) && attr_hash.keys.include?(:parent_id)
continue
attr_hash.keys.include?(:category_id) && attr_hash.keys.include?(:parent_id)
continue
attr_hash.keys.include?(:category_id) && attr_hash.keys.include?(:parent_id)
attr_hash.keys.include?(:category_id, :parent_id)
attr_hash
continue
@login.id
continue
session[:login_id]
next
@login
session[:login_id]
continue
session[:login_id]
next
session[:login_id]
session[:loin_id]
continue
session[:login_id]
exit
$hash
$attr_hash
next
$attr_hash
$hash
exit
continue
exit
continue
Category.all
continue
attr_hash
login
id
continue
next
p  "#{product.id} CREATED!!!!!!!!_______!!!!!!!!!!!!!__________"
continue
next
 product.id
p product.id + " CREATED!!!!!!!!_______!!!!!!!!!!!!!__________"
continue
category
title
exit
images
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((b[:key] == "url") ) } }
images = []
images
arrr[0][:item].map{|b| images << b[:value] if ((b[:key] == "url") ) }
arrr[0][:item].map{|b| images << b[:value] if ((a[:key] == "url") ) }
arrr[0][:item]
arrr[:item]
arrr
images
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((a[:key] == "url") ) } }
images
arrr[:item].map{ |a| images << a[:value] if (a[:key] == "url") }
images
image
arrr[0][:item][:key]
arrr[0][:item]
arrr[0]
arrr.map{|a| p a[:item]}
arrr.map{|a| p a}
arrr.map{ |a| a[:item].map{ |b| images << b[:value] if ((a[:key] == "url") ) } }
arrr
images
next
 arrr == nil
unless arrr == nil
arrr.class
arrr.count
arrr
continue
exit
$children_categories_2_lavel
$children_categories_1_lavel.count
$children_categories_1_lavel
$children_categories_2_lavel
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_3_lavel
continue
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_1_lavel
category
$children_categories_1_lavel
$children_categories_4_lavel.count
$children_categories_3_lavel.count
$children_categories_2_lavel.count
$children_categories_2_lavel
$children_categories_1_lavel.count
$children_categories_1_lavel
next
created_categories.count
created_categories
continue
$children_categories_4_lavel.count
$children_categories_1_lavel.count
$children_categories_2_lavel.count
$children_categories_3_lavel.count
$children_categories_3_lavel
$children_categories_2_lavel
$children_categories_1_lavel.blank?
$children_categories_1_lavel
next
created_categories
exit
$children_categories_1_lavel
next
 created_categories
continue
next
category.id
$children_categories_1_lavel
continue
next
category.id
TargetCategoryImport.delete_all
TargetCategoryImport.all
TargetCategoryImport.count
$children_categories
next
created_categories
next
continue
self
continue
self.target_url.gsub!(/^(https?):\/\//, "")
continue
next
self
continue
self
params
exit
continue
ShopifyAPI::CustomCollection.last
continue
session[:token]
 ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
session[:token]
shop = ShopifyAPI::Shop.current
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
title
continue
login = Login.find(259)
ShopifyAPI::CustomCollection.new(title: "asdasdasdasd" )
ShopifyAPI::CustomCollection.new(title: "asdasdasdasd" } )
ShopifyAPI::CustomCollection.new( @attributes={ 'title': "asdasdasdasd" } ).save
ShopifyAPI::CustomCollection.new( @attributes={ 'title': "asdasdasdasd" } )
ShopifyAPI::CustomCollection.new
ShopifyAPI::CustomCollection.new({ 'title': "asdasd", 'body_html': "asdasd" } )
ShopifyAPI::SmartCollection.new
ShopifyAPI::CustomCollection.new({ 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new
ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
ShopifyAPI::CustomCollection.new
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
exit
ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
continue
categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
body_html
html_body
title
continue
title
 categ = ShopifyAPI::CustomCollection.new( @attributes={ 'title': title, 'body_html': body_html } )
categ
next
continue
