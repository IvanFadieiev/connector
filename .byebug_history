exit
Login.last
product.magento_categories.where(login_id: Login.last.id)
product.magento_categories
product.magento_categories.where(login_id: Login.last.id)
product = Product.last
Product.last.magento_categories.last.target_category_import
Product.last.magento_categories.first.target_category_import
Product.last.magento_categories.last.target_category_import
Product.last.magento_categories
JoinTableCategoriesProduct.where(login_id: 90)
Product.last.magento_categories
JoinTableCategoriesProduct.last
oinTableCategoriesProduct.last
products_to_category[0][:item][0][:value]
products_to_category[0[:item][0][:value]
products_to_category[0]
products_to_category.class
next
products_to_category.class == Hash
next
$products_to_category
$products_to_category == nil
products_to_category
exit
next
cat_id
next
ids
next
cat_id
next
cat_id
params
cat_id
next
cat_id
ids
next
 ids.blank? || ids.include?("-2")
next
ids.include?("0")
cat_id
exit
continue
ids
continue
cat_id
exit
params
cat_id = category.category_id
category = array_category.values[0][0]
array_category.values[0][0]
array_category.values[0]
array_category= @all_categories[0]
@all_categories[0]
@all_categories
param_shopify
cat_id
param_shopify = "#{cat_id}_shopify_categories_ids".to_sym
category.category_id
next
ids.include?("-2")
ids.blank?
ids
next
Collection.where(login_id: @login.id).delete_all
 Collection.where(login_id: @login.id)
exit
ids.include?("0")
ids.includes?("0")
ids = params[param_shopify]
param_shopify = "472_shopify_categories_ids".to_sym
params
ids = params[param_shopify]
param_shopify = "10369_shopify_categories_ids".to_sym
"10369_shopify_categories_ids".to_sym
@all_categories[0].values[0].last
@all_categories[0].values[0].count
@all_categories[0].values[0]
@all_categories.values[0]
@all_categories[0]
@all_categories.last
@all_categories.last.count
@all_categories.count
@all_categories.last
@all_categories.count
@all_categories
@all_categories << { 2 => Category.where(level: 2, is_active: 1, login_id: @login.id)}
@all_categories << { a => Category.where(level: 2, is_active: 1, login_id: @login.id)}
 Category.all.map(&:level).uniq.reject{ |a| (a == 0) || (a == 1) }.sort
params
params[param_shopify]
ids
Collection.where(login_id: @login.id)
@login.id
exit
continue
n
cat.description == nil
cat.description
cat
continue
exit
continue
items[:description]
items.keys
items[:description]
items
exit
continue
category
exit
items
exit
Category.delete_all
Category.last
items
exit
c
category
c
category
c
category
c
n
category
exit
items
exit
items[:children][:item].count
items[:children][:item].class
items[:children][:item]
items[:children].keys
items[:children].class
items[:children].class == Hash
items[:children].blank?
items[:children].blank? && items[:children].class == Hash
items[:children].keys
items[:children].class == Hash
items[:children].blank?
next
items
next
items[:name]
items[:amae]
items[:nmae]
items.keys
items
items.keys
items.keys.include?(:category_id)
items.class == Hash
next
items.keys.include?(:category_id)
itemss.keys.include?(:category_id)
items.class
exit
category[1][1][:children][:item]
category[1][1][:children].class
category[1][1][:children].count
category[1][1]
category[1][0]
category[1].count
category.count
category[0]
category.class
category
continue
category.class
category.clas
category
continue
category.count
category[0]
category.class == Array
category.class == Hash
category
exit
items[0] == :item
items[0]
items.class
items[0]
items.class
items[0]
items[0].count
items[1][16]
items[1].count
items[1].class
items[1]
items.count
items.class
items
exit
items[1]
items.class
items
continue
next
step
items.keys.include?(:parent_id)
exit
items.keys.include?(:parent_id)
items.keys
items.class
items
continue
login
params
exit
$response
c
$client.call(:catalog_product_info, message: {:sessionId => $session, product_id: '181532' , store_view: 4 }).body
$response = $client.call(:catalog_product_info){message(:session => $session, product_id: '181532', store_view: 4)}
$response = $client.call(:catalog_product_info){message(:session => $session, productId: '181532', storeView: 4)}
$session
exit
ShopifyAPI::Shop.current.myshopify_domain
continue
Auth.shopify
continue
ShopifyAPI::Product.last
ShopifyAPI::Product.first
ShopifyAPI::Product.last
ShopifyAPI::Base.activate_session(session)
session = ShopifyAPI::Session.new(domain, token)
token = "32d15d9bad96abe149f1458dbcadd1d0"
domain = "teststore-9999.myshopify.com"
ShopifyAPI::Product.last
ShopifyAPI::Base.activate_session(session)
session = ShopifyAPI::Session.new(domain, token)
token = "9de6ff262c083f364e28980349ca685a"
domain = "magicstreetwear.co.uk"
ShopifyAPI::Product.last
ShopifyAPI::Base.activate_session(session)
session = ShopifyAPI::Session.new(domain, token)
token = "9de6ff262c083f364e28980349ca685a"
domain = "magic-streetwear.myshopify.com"
domain
ShopifyAPI::Product.last
ShopifyAPI::Product.lastt
ShopifyAPI::Product.all
ShopifyAPI:Product.all
ShopifyAPI:Product.last
ShopifyAPI::Base.activate_session(session)
 session = ShopifyAPI::Session.new(domain, token)
token = "9de6ff262c083f364e28980349ca685a"
domain = "magicstreetwear.co.uk"
ShopifyAPI::Base.activate_session(session)
 session = ShopifyAPI::Session.new(domain, token)
token = "9de6ff262c083f364e28980349ca685a"
domain = "magic-streetwear.myshopify.com"
exit
request.host
request.domain
request.params['shop']
